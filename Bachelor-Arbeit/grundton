import librosa
import numpy as np
from scipy.signal import find_peaks

class AudioAnalyzer:
    def __init__(self, mp3_file):
        self.mp3_file = mp3_file
        print("funktioniert")
        self.load_audio()

    def load_audio(self):
        # Laden der MP3-Datei und Extrahieren des Audiosignals
        self.audio, self.sample_rate = librosa.load(self.mp3_file)

    def get_grundfrequenz(self, start_time=0, duration=1):
        # Extrahieren des Audiosignals im angegebenen Zeitbereich
        start_sample = int(start_time * self.sample_rate)
        end_sample = start_sample + int(duration * self.sample_rate)
        audio_segment = self.audio[start_sample:end_sample]

        # Berechnen der FFT (Fast Fourier Transform) für das Audio-Segment
        fft_result = np.fft.fft(audio_segment)

        # Frequenzbereich definieren
        frequenzbereich = np.fft.fftfreq(len(fft_result), 1.0 / self.sample_rate)

        # Finden des Peaks (Grundfrequenz) im Frequenzspektrum
        grundfrequenz_index = np.argmax(np.abs(fft_result))

        # Die tatsächliche Grundfrequenz in Hertz
        grundfrequenz = np.abs(frequenzbereich[grundfrequenz_index])

        return grundfrequenz

    def get_obertonfrequenzen(self, start_time=0, duration=1, schwellenwert=0.1, min_peak_distance=50):
        # Extrahieren des Audiosignals im angegebenen Zeitbereich
        start_sample = int(start_time * self.sample_rate)
        end_sample = start_sample + int(duration * self.sample_rate)
        audio_segment = self.audio[start_sample:end_sample]

        # Berechnen der FFT (Fast Fourier Transform) für das Audio-Segment
        fft_result = np.fft.fft(audio_segment)

        # Frequenzbereich definieren
        frequenzbereich = np.fft.fftfreq(len(fft_result), 1.0 / self.sample_rate)

        # Finden des Peaks (Grundfrequenz) im Frequenzspektrum
        grundfrequenz_index = np.argmax(np.abs(fft_result))

        # Die tatsächliche Grundfrequenz in Hertz
        grundfrequenz = np.abs(frequenzbereich[grundfrequenz_index])

        # Festlegen eines Schwellenwerts für die Peak-Detektion
        schwellenwert = schwellenwert * np.max(np.abs(fft_result))

        # Finden von Peaks im Frequenzspektrum mit Mindestdistanz zwischen Peaks
        peaks, _ = find_peaks(np.abs(fft_result), height=schwellenwert, distance=min_peak_distance)

        # Extrahieren der Frequenzen der gefundenen Peaks
        gefundene_obertonfrequenzen = np.abs(frequenzbereich[peaks])

        # Filtern der Obertonfrequenzen, die ein Vielfaches der Grundfrequenz sind
        obertonfrequenzen = [f for f in gefundene_obertonfrequenzen if np.isclose(f % grundfrequenz, 0, atol=1)]

        return obertonfrequenzen
