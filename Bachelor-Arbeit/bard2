import numpy as np
import librosa
import matplotlib.pyplot as plt

def fourier_transform(signal):
    """
    Berechnet die Fourier-Transformation eines Signals.

    Args:
        signal: Das Signal, dessen Fourier-Transformation berechnet werden soll.

    Returns:
        Die Fourier-Transformation des Signals.
    """

    return np.fft.fft(signal)

def overtone_series(fundamental_frequency):
    """
    Berechnet die Obertonreihe einer Grundfrequenz.

    Args:
        fundamental_frequency: Die Grundfrequenz.

    Returns:
        Die Obertonreihe.
    """

    overtones = []
    for n in range(1, 100):
        overtone = fundamental_frequency * n
        overtones.append(overtone)
    return overtones

def determine_instrument(overtone_series_arg):
    """
    Bestimmt das Instrument anhand der Obertonreihe.

    Args:
        overtone_series_arg: Die Obertonreihe.

    Returns:
        Das Instrument.
    """

    instruments = {
        "Streichinstrumente": [
            "Violine",
            "Bratsche",
            "Cello",
            "Kontrabass",
        ],
        "Holzblasinstrumente": [
            "Blockflöte",
            "Querflöte",
            "Oboe",
            "Klarinette",
            "Saxophon",
            "Fagott",
        ],
        "Blechblasinstrumente": [
            "Horn",
            "Trompete",
            "Posaune",
            "Tuba",
        ],
        "Schlaginstrumente": [
            "Pauke",
            "große Trommel",
            "kleine Trommel",
            "Becken",
            "Triangel",
        ],
    }

    for instrument_type, instruments_list in instruments.items():
        for instrument in instruments_list:
            if all(overtone in overtone_series_arg for overtone in overtone_series(instrument.fundamental_frequency)):
                return instrument
    return None

def main():
    """
    Hauptprogramm.
    """

    # Audiodatei laden
    audio_path = "langeWAV.wav"
    audio, sr = librosa.load(audio_path, sr=None, dtype=np.float32)

    # Audiodatei in einzelne Stimmen zerlegen
    voices = librosa.effects.split(audio)

    # Für jede Stimme die Obertonreihe berechnen
    overtone_serieses = []
    for voice in voices:
        chroma = librosa.feature.chroma_stft(y=voice, sr=sr)
        pitches = np.argmax(chroma, axis=0)
        fundamental_frequency = librosa.midi_to_hz(pitches)
        overtone_serieses.append(overtone_series(fundamental_frequency))

    # Für jede Stimme das Instrument bestimmen
    instruments = []
    for overtone_series_arg in overtone_serieses:
        instrument = determine_instrument(overtone_series_arg)
        instruments.append(instrument)

    # Ergebnisse ausgeben
    print("Ergebnisse:")
    for i, (voice, instrument) in enumerate(zip(voices, instruments)):
        print(f"Stimme {i + 1}: {voice}, {instrument}")

if __name__ == "__main__":
    main()
