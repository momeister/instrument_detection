import librosa
import numpy as np
from scipy.signal import find_peaks

# Pfad zur MP3-Datei
mp3_file = 'Klänge/einstimmig-1-mp.mp3'

# Laden der MP3-Datei und Extrahieren des Audiosignals
audio, sample_rate = librosa.load(mp3_file)

# Ausschneiden der ersten Sekunde des Audiosignals
audio_1s = audio[:sample_rate]

# Berechnen der FFT (Fast Fourier Transform) für das Audio
fft_result = np.fft.fft(audio_1s)

# Frequenzbereich definieren
frequenzbereich = np.fft.fftfreq(len(fft_result), 1.0 / sample_rate)

# Finden des Peaks (Grundfrequenz) im Frequenzspektrum
grundfrequenz_index = np.argmax(np.abs(fft_result))

# Die tatsächliche Grundfrequenz in Hertz
grundfrequenz = np.abs(frequenzbereich[grundfrequenz_index])

# Anzeigen der Grundfrequenz
print("Grundfrequenz in der ersten Sekunde:")
print(f"Grundfrequenz: {grundfrequenz:.2f} Hz")

# Festlegen eines Schwellenwerts für die Peak-Detektion (z.B. 0.1, je nach Datenqualität anpassen)
schwellenwert = 0.1 * np.max(np.abs(fft_result))

# Finden von Peaks im Frequenzspektrum mit Mindestdistanz zwischen Peaks
peaks, _ = find_peaks(np.abs(fft_result), height=schwellenwert, distance=50)

# Extrahieren der Frequenzen der gefundenen Peaks
gefundene_obertonfrequenzen = np.abs(frequenzbereich[peaks])

# Filtern der Obertonfrequenzen, die ein Vielfaches der Grundfrequenz sind
obertonfrequenzen = [f for f in gefundene_obertonfrequenzen if np.isclose(f % grundfrequenz, 0, atol=1)]

# Anzeigen der gefundenen Obertonfrequenzen
print("\nGefundene Obertonfrequenzen in der ersten Sekunde:")
for i, frequency in enumerate(obertonfrequenzen[:10]):  # Erhöht auf 6
    print(f"Obertonfrequenz {i + 1}: {frequency:.2f} Hz")
